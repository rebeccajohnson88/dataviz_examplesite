[
  {
    "objectID": "geovisualization.html",
    "href": "geovisualization.html",
    "title": "Geoviz using Leaflet",
    "section": "",
    "text": "Here, I’ll walk you through the code for a geovisualization.\n\n\nShow the code\nlibrary(tidyverse) \nlibrary(stringr)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(tigris)\nlibrary(sf)\n\n## load state polygons\nstates &lt;- states(year = 2020)\nstates_leaflet &lt;- states %&gt;% \n            st_transform(crs = 4326)\n\n\n\n\nShow the code\n## clean vote data\nvote_returns = read.csv(\"1976-2020-president.csv\")\nvote_focus &lt;- vote_returns %&gt;%\n          filter(year == 2020 & \n                party_simplified == \"REPUBLICAN\") %&gt;%\n          mutate(STATEFP = str_pad(state_fips, width = 2, side = \"left\", pad = \"0\"),\n                 vote_share = candidatevotes/totalvotes) \n\n## merge state polygons with vote share\nstate_w_votefocus &lt;- states_leaflet %&gt;%\n            inner_join(vote_focus, by = \"STATEFP\")\n\n## create color palette\nbins &lt;- quantile(vote_focus$vote_share, probs = seq(from = 0, to = 1, by = 0.2))\npalette &lt;- colorBin(\"YlOrRd\", domain = state_w_votefocus$vote_share, bins = bins)\n\n## create labels for each state\nstate_labels &lt;- sprintf(\"&lt;strong&gt;State:&lt;/strong&gt; %s&lt;br/&gt;&lt;strong&gt;Republican Vote Share:&lt;/strong&gt; %.2f\",\n                  state_w_votefocus$NAME,\n                  state_w_votefocus$vote_share) %&gt;%\n            lapply(htmltools::HTML)\n\n## create choropleth map\nleaflet(state_w_votefocus) %&gt;%\n    addProviderTiles(\"OpenStreetMap\",\n                     group = \"OpenStreetMap\") %&gt;%\n    setView(-96, 37.8, 4) %&gt;%\n    addPolygons(fillColor = ~palette(vote_share),\n                weight = 2,\n                opacity = 1,\n                color = \"white\",\n                fillOpacity = 0.8,\n    highlightOptions = highlightOptions(\n    weight = 5,\n    color = \"black\",\n    fillOpacity = 0.8,\n    bringToFront = TRUE),\n    label = state_labels) %&gt;%\n    addLegend(pal = palette, values = ~vote_share, opacity = 0.8, \n              title = \"Republican vote share\",\n    position = \"bottomright\")"
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "Shiny visualization of flood claims",
    "section": "",
    "text": "Here is a Shiny app related to FEMA claims for flood damage.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(arrow)\n\nflood_claims &lt;- read_parquet(\"FimaNfipClaims.parquet\")\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"FEMA Flood Claims\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n          selectInput(inputId= \"input_state\",\n                       label = \"State to show:\",\n                       choices = sort(unique(flood_claims$state)),\n                       selected = \"FL\"),\n          dateRangeInput(inputId = \"input_date\",\n                        label = \"Date Range\",\n                        start = \"1978-01-01\",\n                        end = \"2024-09-01\",\n                        min = min(flood_claims$dateOfLoss),\n                        max = max(flood_claims$dateOfLoss),\n                        startview = \"year\")\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n            plotOutput(\"year_plot\"),\n           tableOutput(\"agg_table\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    d_agg &lt;- reactive({\n        flood_claims %&gt;%\n        filter(state == input$input_state &\n              dateOfLoss &gt;= input$input_date[1],\n              dateOfLoss &lt;= input$input_date[2]) %&gt;%\n       group_by(yearOfLoss) %&gt;%\n      summarise(count_claims = n())\n    })\n    \n    output$agg_table &lt;- renderTable({\n      d_agg()\n    })\n    \n    output$year_plot &lt;- renderPlot({\n      ggplot(d_agg(), aes(x = yearOfLoss, y = count_claims)) +\n        geom_point() +\n        geom_line() +\n        theme_bw() +\n        xlab(\"Year of claim\") +\n        ylab(\"Count of claims\") +\n        scale_x_continuous(breaks = seq(from = min(d_agg()$yearOfLoss), to = \n                                          max(d_agg()$yearOfLoss),\n                                        by = 2)) +\n        ggtitle(sprintf(\"Count of flood insurance claims per year in %s\",\n                      input$input_state)) \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Portfolio: RJ",
    "section": "",
    "text": "Welcome to my Data Science Portfolio for PPOL 5202! Here, I’ll display various interactive visualizations, alongside code to produce those visualizations.\nThese visualizations include:\n\nChoropleth visualization of polling results"
  }
]